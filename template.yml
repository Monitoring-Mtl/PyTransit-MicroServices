AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  PyTransit

  Lambda functions to fetch and filter STM GTFS files in Python

Parameters: 
  ApiKeyStm:
    Description: The STM API Key
    Type: String
  ApiUrlStmTrip:
    Description: The STM API Trip URL
    Type: String
  ApiUrlStmVehicle:
    Description: The STM API Vehicle URL
    Type: String
  Date:
    Description: Date of today for version history
    Type: String
  UpdateCheck:
    Description: Checks if each function can be updated
    Type: CommaDelimitedList
    #AllowedValues:
    #  - "1"
    #  - "0"
    #  - ""
  AtlasUri:
    Description: "MongoDB Atlas connection URI."
    Type: String
  MongoDatabaseName:
    Description: "Name of the MongoDB database."
    Type: String
    Default: "test-monitoring-mtl"
  BixiUrlCollection:
    Description: "Name of the collection for storing BIXI data URLs."
    Type: String
    Default: "historic_data_urls"
  BixiLocationCollection:
    Description: "Name of the collection for storing BIXI station location data."
    Type: String
    Default: "station_locations"
  BixiTripCollection:
    Description: "Name of the collection for storing BIXI trip data."
    Type: String
    Default: "trips"
  BixiDataUrl:
    Description: "URL for BIXI open data."
    Type: String
    Default: "https://bixi.com/en/open-data"
  BixiCdn:
    Description: "CDN URL for BIXI data."
    Type: String
    Default: "https://s3.ca-central-1.amazonaws.com/cdn.bixi.com/"
  BixiDefaultExtractPath:
    Description: "Default path for extracting BIXI data."
    Type: String
    Default: "/tmp/data/"
  BixiChunkSize:
    Description: "Chunk size for processing BIXI data."
    Type: Number
    Default: "250000"
  
Conditions:
  SetBIXIFetchGBFSStationStatus: !Not [!Equals [!Select [0, !Ref UpdateCheck], "0"]]
  SetSTMAnalyzeDailyStopsData: !Not [!Equals [!Select [1, !Ref UpdateCheck], "0"]]
  SetSTMCreateDailyStopsInfo: !Not [!Equals [!Select [2, !Ref UpdateCheck], "0"]]
  SetSTMFetchGTFSTripUpdates: !Not [!Equals [!Select [3, !Ref UpdateCheck], "0"]]
  #SetSTMFetchGTFSVehiclePositions: !Not [!Equals [!Select [4, !Ref UpdateCheck], "0"]]
  SetSTMFetchUpdateGTFSStaticfiles: !Not [!Equals [!Select [5, !Ref UpdateCheck], "0"]]
  SetSTMFilterDailyGTFStaticfiles: !Not [!Equals [!Select [6, !Ref UpdateCheck], "0"]]
  SetSTMMergeDailyGTFSVechiclePositions: !Not [!Equals [!Select [7, !Ref UpdateCheck], "0"]]
  SetBixiHistoricDataCheckerLambda: !Not [!Equals [!Select [8, !Ref UpdateCheck], "0"]]
  SetBixiHistoricDataProcessorLambda: !Not [!Equals [!Select [9, !Ref UpdateCheck], "0"]]

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5 # Timeout in seconds
    MemorySize: 128

Resources:
####################### FETCH GTFS TRIP_UPDATES #######################
  STMFetchGTFSTripUpdates:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: "Fetches update in STM real time schedule to detect delay or advance"
      Timeout: 15 # Timeout in seconds
      MemorySize: 256
      CodeUri: STM_Services/STM_Fetch_GTFS_TripUpdates/
      Handler: main.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          API_URL_STM_TRIP: !Ref ApiUrlStmTrip
          API_URL_STM_VEHICLE: !Ref ApiUrlStmVehicle
          API_KEY_STM: !Ref ApiKeyStm
  
  STMFetchGTFSTripUpdatesVersion:
    Condition: SetSTMFetchGTFSTripUpdates
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref Date
      FunctionName: !Ref STMFetchGTFSTripUpdates

  STMFetchGTFSTripUpdatesAlias:
    Condition: SetSTMFetchGTFSTripUpdates
    Type: AWS::Lambda::Alias
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref STMFetchGTFSTripUpdates
      FunctionVersion: !GetAtt STMFetchGTFSTripUpdatesVersion.Version
      Name: Live
  
  STMFetchGTFSTripUpdatesTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: "Calls STMFetchGTFSTripUpdates every 15 minutes"
      ScheduleExpression: rate(15 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt STMFetchGTFSTripUpdates.Arn
          Id: "TargetTripUpdates"
          Input: >-
            {
              "bucket_name": "monitoring-mtl-stm-gtfs-trip-updates",
              "timezone": "America/Montreal"
            }
  
  STMFetchGTFSTripUpdatesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt STMFetchGTFSTripUpdates.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt STMFetchGTFSTripUpdatesTrigger.Arn

####################### FETCH GTFS VEHICLE_POSISTIONS #######################
  STMFetchGTFSVehiclePositions:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: "Fetches bus positions and other information in real time"
      Timeout: 10 # Timeout in seconds
      MemorySize: 128
      CodeUri: STM_Services/STM_Fetch_GTFS_VehiclePositions/
      Handler: main.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          API_URL_STM_TRIP: !Ref ApiUrlStmTrip
          API_URL_STM_VEHICLE: !Ref ApiUrlStmVehicle
          API_KEY_STM: !Ref ApiKeyStm

#Broken function so we keep it at version 1 until fixed
  # STMFetchGTFSVehiclePositionsVersion:
  #   Condition: SetSTMFetchGTFSVehiclePositions
  #   Type: AWS::Lambda::Version
  #   DeletionPolicy: Retain
  #   UpdateReplacePolicy: Retain
  #   Properties:
  #     Description: !Ref Date
  #     FunctionName: !Ref STMFetchGTFSVehiclePositions

  # STMFetchGTFSVehiclePositionsAlias:
  #   Condition: SetSTMFetchGTFSVehiclePositions
  #   Type: AWS::Lambda::Alias
  #   DeletionPolicy: Retain
  #   UpdateReplacePolicy: Retain
  #   Properties:
  #     FunctionName: !Ref STMFetchGTFSVehiclePositions
  #     FunctionVersion: !GetAtt STMFetchGTFSVehiclePositionsVersion.Version
  #     Name: Live

  # STMFetchGTFSVehiclePositionsStateMachine:
  #   Type: AWS::Serverless::StateMachine
  #   Properties:
  #     DefinitionSubstitutions:
  #       LambdaFunctionArn: !If [SetSTMFetchGTFSVehiclePositions, !Ref STMFetchGTFSVehiclePositionsAlias, !Join [":", [!GetAtt STMFetchGTFSVehiclePositions.Arn,"Live"]]]
  #     Definition:
  #       StartAt: Fetch_GTFS_Vehicles
  #       States:
  #         Fetch_GTFS_Vehicles:
  #           Type: Map
  #           ItemsPath: $.range(1, 6)  # Will iterate from 1 to 5
  #           Iterator:
  #             StartAt: Fetch_GTFS_Vehicle
  #             States:
  #               Fetch_GTFS_Vehicle:
  #                 Type: Task
  #                 Resource: arn:aws:states:::lambda:invoke
  #                 Parameters:
  #                   FunctionName: !If [SetSTMFetchGTFSVehiclePositions, !Ref STMFetchGTFSVehiclePositionsAlias, !Join [":", [!GetAtt STMFetchGTFSVehiclePositions.Arn,"Live"]]]
  #                   Payload.$: $
  #                 Retry:
  #                   - ErrorEquals:
  #                       - Lambda.ServiceException
  #                       - Lambda.AWSLambdaException
  #                       - Lambda.SdkClientException
  #                       - Lambda.TooManyRequestsException
  #                     IntervalSeconds: 1
  #                     MaxAttempts: 3
  #                     BackoffRate: 2
  #                 Next: WaitOrEnd
  #               WaitOrEnd:
  #                 Type: Choice
  #                 Choices:
  #                   - Condition: "Variable('$.iterator') < 5"  # Wait for 4 times
  #                     Next: Wait10Sec
  #                   - Condition: "Variable('$.iterator') == 5"  # End the state machine after 5 iterations
  #                     End: true
  #               Wait10Sec:
  #                 Type: Wait
  #                 Seconds: 10
  #                 Next: Fetch_GTFS_Vehicles
  #       Comment: Fetch GTFS Vehicles Positions 5 times per 60 seconds and store in S3 Bucket (EXPRESSS)
  #     Type: EXPRESS
  #     Role: !GetAtt StateMachineExecutionRole.Arn
  #     Logging:
  #       Destinations:
  #         - CloudWatchLogsLogGroup:
  #             LogGroupArn: !GetAtt StateMachineLogGroup.Arn
  #       IncludeExecutionData: true
  #       Level: ALL

  # StateMachineLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: /aws/vendedlogs/states/STMStateMachineLogGroup
  #     RetentionInDays: 30

  # StateMachineScheduler:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     ScheduleExpression: "rate(1 minute)"
  #     Targets:
  #       - Arn: !Ref STMFetchGTFSVehiclePositionsStateMachine
  #         Id: "StateMachineSchedule"
  #         RoleArn: !GetAtt StateMachineExecutionRole.Arn
  #         Input: >
  #           {
  #             "bucket_name": "monitoring-mtl-stm-gtfs-vehicle-positions",
  #             "timezone": "America/Montreal"
  #           }
            
  # StateMachineExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             Service: "states.amazonaws.com"
  #           Action: "sts:AssumeRole"
  #     Policies:
  #       - PolicyName: "StateMachineExecutionPolicy"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: "Allow"
  #               Action:
  #                 - "lambda:InvokeFunction"
  #               Resource: !If [SetSTMFetchGTFSVehiclePositions, !Ref STMFetchGTFSVehiclePositionsAlias, !Join [":", [!GetAtt STMFetchGTFSVehiclePositions.Arn,"Live"]]]
  #       - PolicyName: "CloudWatchLogsPolicy"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: "Allow"
  #               Action:
  #                 - "logs:CreateLogGroup"
  #                 - "logs:CreateLogStream"
  #                 - "logs:PutLogEvents"
  #               Resource: 
  #                 - !GetAtt StateMachineLogGroup.Arn

####################### FETCH GBFS STATION_STATUS #######################
  BIXIFetchGBFSStationStatusRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  
  BIXIFetchGBFSStationStatus:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: "Fetches Bixi station status data and parse it into a parquet file that is then save on a s3 bucket"
      Timeout: 15 # Timeout in seconds
      MemorySize: 256
      Role: !GetAtt BIXIFetchGBFSStationStatusRole.Arn
      CodeUri: BIXI_Services/BIXI_Fetch_GBFS_Station_Status/
      Handler: main.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64

  BIXIFetchGBFSStationStatusPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BIXIFetchGBFSStationStatusPolicy
      Roles:
        - !Ref BIXIFetchGBFSStationStatusRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource: arn:aws:s3:::monitoring-mtl-bixi-gtfs-station-status-dev/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              !Join 
              - ""
              - - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/"
                - !Select [1, !Split [":function:", !GetAtt BIXIFetchGBFSStationStatus.Arn]]
                - ":*"

  BIXIFetchGBFSStationStatusVersion:
    Condition: SetBIXIFetchGBFSStationStatus
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref Date
      FunctionName: !Ref BIXIFetchGBFSStationStatus

  BIXIFetchGBFSStationStatusAlias:
    Condition: SetBIXIFetchGBFSStationStatus
    Type: AWS::Lambda::Alias
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref BIXIFetchGBFSStationStatus
      FunctionVersion: !GetAtt BIXIFetchGBFSStationStatusVersion.Version
      Name: Live

  BIXIFetchGBFSStationStatusTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: "Calls BIXIFetchGBFSStationStatus every minute (Same speed as the data is refreshed)"
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt BIXIFetchGBFSStationStatus.Arn
          Id: "TargetBixiFetch"
          Input: >-
            {
              "bucket_name": "monitoring-mtl-bixi-gtfs-station-status-dev",
              "url": "https://gbfs.velobixi.com/gbfs/en/station_status.json"
            }
  
  BIXIFetchGBFSStationStatusPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BIXIFetchGBFSStationStatus.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BIXIFetchGBFSStationStatusTrigger.Arn

  ####################### BIXI - CHECK NEW HISTORIC DATA #######################
  BixiHistoricDataCheckerLambda:
    Description: "Lambda function for checking the availability and consistency of historic BIXI data."
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.handler
      Runtime: python3.9
      CodeUri: BIXI_Services/BIXI_Historical_Data_Checker/
      MemorySize: 128
      Timeout: 60
      Role: !GetAtt BixiHistoricDataCheckerRole.Arn
      Environment:
        Variables:
          BIXI_DATA_URL: !Ref BixiDataUrl
          BIXI_CDN: !Ref BixiCdn
          ATLAS_URI: !Ref AtlasUri
          MONGO_DATABASE_NAME: !Ref MongoDatabaseName
          BIXI_URL_COLLECTION: !Ref BixiUrlCollection

  BixiHistoricDataCheckerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  BixiHistoricDataCheckerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BixiHistoricDataCheckerPolicy
      Roles:
        - !Ref BixiHistoricDataCheckerRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join
              - ""
              - - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/"
                - !Select [
                    1,
                    !Split [":function:", !GetAtt BixiHistoricDataCheckerLambda.Arn],
                  ]
                - ":*"

  BixiHistoricDataCheckerVersion:
    Condition: SetBixiHistoricDataCheckerLambda
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref BixiHistoricDataCheckerLambda

  BixiHistoricDataCheckerAlias:
    Condition: SetBixiHistoricDataCheckerLambda
    Type: AWS::Lambda::Alias
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref BixiHistoricDataCheckerLambda
      FunctionVersion: !GetAtt BixiHistoricDataCheckerVersion.Version
      Name: Live

  ####################### BIXI - HISTORIC DATA PROCESSOR #######################
  BixiHistoricDataProcessorLambda:
    Description: "Lambda function for processing historic BIXI data."
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.handler
      Runtime: python3.9
      CodeUri: BIXI_Services/BIXI_Historical_Data_Processor/
      MemorySize: 8192
      EphemeralStorage:
        Size: 3072
      Timeout: 900
      Role: !GetAtt BixiHistoricDataProcessorRole.Arn
      Environment:
        Variables:
          BIXI_DATA_URL: !Ref BixiDataUrl
          BIXI_CDN: !Ref BixiCdn
          ATLAS_URI: !Ref AtlasUri
          MONGO_DATABASE_NAME: !Ref MongoDatabaseName
          BIXI_URL_COLLECTION: !Ref BixiUrlCollection
          BIXI_DEFAULT_EXTRACT_PATH: !Ref BixiDefaultExtractPath
          BIXI_LOCATION_COLLECTION: !Ref BixiLocationCollection
          BIXI_TRIP_COLLECTION: !Ref BixiTripCollection
          BIXI_CHUNK_SIZE: !Ref BixiChunkSize

  BixiHistoricDataProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  BixiHistoricDataProcessorPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BixiHistoricDataProcessorPolicy
      Roles:
        - !Ref BixiHistoricDataProcessorRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join
              - ""
              - - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/"
                - !Select [
                    1,
                    !Split [
                      ":function:",
                      !GetAtt BixiHistoricDataProcessorLambda.Arn,
                    ],
                  ]
                - ":*"

  BixiHistoricDataProcessorVersion:
    Condition: SetBixiHistoricDataProcessorLambda
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref BixiHistoricDataProcessorLambda

  BixiHistoricDataProcessorAlias:
    Condition: SetBixiHistoricDataProcessorLambda
    Type: AWS::Lambda::Alias
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref BixiHistoricDataProcessorLambda
      FunctionVersion: !GetAtt BixiHistoricDataProcessorVersion.Version
      Name: Live
  
  ####################### BIXI - HISTORIC DATA SCHEDULER #######################
  BixiHistoricDataWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      # AI generated logic. tested. but needs another review.
      DefinitionString: !Sub |
        {
          "StartAt": "CheckData",
          "States": {
            "CheckData": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${BixiHistoricDataCheckerLambda.Arn}",
                "Payload": {
                  "Input.$": "$"
                }
              },
              "Next": "IsProcessingNeeded"
            },
            "IsProcessingNeeded": {
              "Type" : "Choice",
              "Choices": [
                {
                  "Variable": "$.Payload.process",
                  "BooleanEquals": true,
                  "Next": "ProcessData"
                }
              ],
              "Default": "NoOperation"
            },
            "ProcessData": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${BixiHistoricDataProcessorLambda.Arn}",
                "Payload": {
                  "urls.$": "$.Payload.urls"
                }
              },
              "End": true
            },
            "NoOperation": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt BixiHistoricDataStepFunctionsExecutionRole.Arn

  BixiHistoricDataStateMachineTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: "Triggers the BixiHistoricDataWorkflow State Machine on the 2nd of every month at 3 AM."
      ScheduleExpression: "cron(0 3 2 * ? *)"
      Targets:
        - Arn: !Ref BixiHistoricDataWorkflow
          Id: "BixiHistoricDataStateMachineTrigger"
          RoleArn: !GetAtt BixiHistoricDataEventsRole.Arn

  BixiHistoricDataEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref BixiHistoricDataWorkflow

  BixiHistoricDataStepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvocation
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt BixiHistoricDataCheckerLambda.Arn
                  - !GetAtt BixiHistoricDataProcessorLambda.Arn

####################### FETCH URL STATIC FILES #######################
  STMFetchUpdateGTFSStaticfiles:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: "Looks if the bus schedule on the bucket is up to date with the STM files and updates it if not"
      Timeout: 60 # Timeout in seconds
      MemorySize: 2048
      CodeUri: STM_Services/STM_Fetch_Update_GTFS_Static_files/
      Handler: main.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          API_URL_STM_TRIP: !Ref ApiUrlStmTrip
          API_URL_STM_VEHICLE: !Ref ApiUrlStmVehicle
          API_KEY_STM: !Ref ApiKeyStm
  
  STMFetchUpdateGTFSStaticfilesVersion:
    Condition: SetSTMFetchUpdateGTFSStaticfiles
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref Date
      FunctionName: !Ref STMFetchUpdateGTFSStaticfiles

  STMFetchUpdateGTFSStaticfilesAlias:
    Condition: SetSTMFetchUpdateGTFSStaticfiles
    Type: AWS::Lambda::Alias
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref STMFetchUpdateGTFSStaticfiles
      FunctionVersion: !GetAtt STMFetchUpdateGTFSStaticfilesVersion.Version
      Name: Live
    
  STMFetchUpdateGTFSStaticfilesTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: "Calls STMFetchUpdateGTFSStaticfiles every morning at 5:15 AM (UTC)"
      ScheduleExpression: cron(15 5 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt STMFetchUpdateGTFSStaticfiles.Arn
          Id: "TargetUpdateStaticFiles"
          Input: >-
            {
              "bucket_name": "monitoring-mtl-gtfs-static",
              "url": "https://www.stm.info/sites/default/files/gtfs/gtfs_stm.zip"
            }
          
  STMFetchUpdateGTFSStaticfilesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt STMFetchUpdateGTFSStaticfiles.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt STMFetchUpdateGTFSStaticfilesTrigger.Arn

####################### FILTER DAILY GTFS STATIC #######################
  STMFilterDailyGTFStaticfiles:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: "Filters daily the information from the static files to keep only the relevant information from the calendar, trips and stop times files from the 'monitoring-mtl-gtfs-static' bucket into the 'monitoring-mtl-gtfs-static-daily' bucket"
      Timeout: 180 # Timeout in seconds
      MemorySize: 2048
      CodeUri: STM_Services/STM_Filter_Daily_GTFS_Static_files/
      Handler: main.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          API_URL_STM_TRIP: !Ref ApiUrlStmTrip
          API_URL_STM_VEHICLE: !Ref ApiUrlStmVehicle
          API_KEY_STM: !Ref ApiKeyStm

  STMFilterDailyGTFStaticfilesVersion:
    Condition: SetSTMFilterDailyGTFStaticfiles
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref Date
      FunctionName: !Ref STMFilterDailyGTFStaticfiles

  STMFilterDailyGTFStaticfilesAlias:
    Condition: SetSTMFilterDailyGTFStaticfiles
    Type: AWS::Lambda::Alias
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref STMFilterDailyGTFStaticfiles
      FunctionVersion: !GetAtt STMFilterDailyGTFStaticfilesVersion.Version
      Name: Live

  STMFilterDailyGTFStaticfilesTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: "Calls STMFilterDailyGTFStaticfiles every morning at 5:30 AM (UTC)"
      ScheduleExpression: cron(30 5 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt STMFilterDailyGTFStaticfiles.Arn
          Id: "TargetFilterStaticFiles"
          Input: >-
            {
              "input_bucket": "monitoring-mtl-gtfs-static",
              "output_bucket": "monitoring-mtl-gtfs-static-daily",
              "timezone": "America/Montreal"
            }
          
  STMFilterDailyGTFStaticfilesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt STMFilterDailyGTFStaticfiles.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt STMFilterDailyGTFStaticfilesTrigger.Arn

####################### ANALYZE #######################
  STMAnalyzeDailyStopsData:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: "Analyze the delay of a bus for each stops while also calculating the level of occupation and the level of wheelchair accessibility"
      Timeout: 840 # Timeout in seconds
      MemorySize: 8192
      CodeUri: STM_Services/STM_Analyse_Daily_Stops_Data/
      Handler: main.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
          Variables:
            API_URL_STM_TRIP: !Ref ApiUrlStmTrip
            API_URL_STM_VEHICLE: !Ref ApiUrlStmVehicle
            API_KEY_STM: !Ref ApiKeyStm

  STMAnalyzeDailyStopsDataVersion:
    Condition: SetSTMAnalyzeDailyStopsData
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref Date
      FunctionName: !Ref STMAnalyzeDailyStopsData

  STMAnalyzeDailyStopsDataAlias:
    Condition: SetSTMAnalyzeDailyStopsData
    Type: AWS::Lambda::Alias
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref STMAnalyzeDailyStopsData
      FunctionVersion: !GetAtt STMAnalyzeDailyStopsDataVersion.Version
      Name: Live
  
  STMAnalyzeDailyStopsDataTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: "Calls STMAnalyzeDailyStopsData every day at 6 AM (UTC)"
      ScheduleExpression: cron(0 6 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt STMAnalyzeDailyStopsData.Arn
          Id: "TargetAnalyze"
          Input: >-
            {
              "daily_static_bucket": "monitoring-mtl-gtfs-static-daily",
              "bucket_vehicle_positions_daily_merge": "monitoring-mtl-stm-gtfs-vehicle-positions-daily-merge",
              "output_bucket": "monitoring-mtl-stm-analytics",
              "timezone": "America/Montreal"
            }
          
  STMAnalyzeDailyStopsDataPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt STMAnalyzeDailyStopsData.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt STMAnalyzeDailyStopsDataTrigger.Arn

####################### CREATE DAILY STOPS INFO #######################
  STMCreateDailyStopsInfo:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: "Creates routes daily for the frontend"
      Timeout: 60 # Timeout in seconds
      MemorySize: 1024
      CodeUri: STM_Services/STM_Create_Daily_Stops_Info/
      Handler: main.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
            Variables:
              API_URL_STM_TRIP: !Ref ApiUrlStmTrip
              API_URL_STM_VEHICLE: !Ref ApiUrlStmVehicle
              API_KEY_STM: !Ref ApiKeyStm

  STMCreateDailyStopsInfoVersion:
    Condition: SetSTMCreateDailyStopsInfo
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref Date
      FunctionName: !Ref STMCreateDailyStopsInfo

  STMCreateDailyStopsInfoAlias:
    Condition: SetSTMCreateDailyStopsInfo
    Type: AWS::Lambda::Alias
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref STMCreateDailyStopsInfo
      FunctionVersion: !GetAtt STMCreateDailyStopsInfoVersion.Version
      Name: Live

  STMCreateDailyStopsInfoTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: "Calls STMCreateDailyStopsInfo every day at 5:45 AM (UTC)"
      ScheduleExpression: cron(45 5 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt STMCreateDailyStopsInfo.Arn
          Id: "TargetCreateDailyStops"
          Input: >-
            {
              "static_bucket": "monitoring-mtl-gtfs-static",
              "daily_static_bucket": "monitoring-mtl-gtfs-static-daily",
              "output_bucket": "monitoring-mtl-gtfs-daily-stops-infos",
              "timezone": "America/Montreal"
            }
          
  STMCreateDailyStopsInfoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt STMCreateDailyStopsInfo.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt STMCreateDailyStopsInfoTrigger.Arn

####################### MERGE DAILY VEHICLE POSITIONS #######################
  STMMergeDailyGTFSVechiclePositions:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: "Concatenates all Vehicle Positions files into one"
      Timeout: 600 # Timeout in seconds
      MemorySize: 4096
      CodeUri: STM_Services/STM_Merge_Daily_GTFS_VehiclePositions/
      Handler: main.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
            Variables:
              API_URL_STM_TRIP: !Ref ApiUrlStmTrip
              API_URL_STM_VEHICLE: !Ref ApiUrlStmVehicle
              API_KEY_STM: !Ref ApiKeyStm
  
  STMMergeDailyGTFSVechiclePositionsVersion:
    Condition: SetSTMMergeDailyGTFSVechiclePositions
    Type: AWS::Lambda::Version
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref Date
      FunctionName: !Ref STMMergeDailyGTFSVechiclePositions

  STMMergeDailyGTFSVechiclePositionsAlias:
    Condition: SetSTMMergeDailyGTFSVechiclePositions
    Type: AWS::Lambda::Alias
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref STMMergeDailyGTFSVechiclePositions
      FunctionVersion: !GetAtt STMMergeDailyGTFSVechiclePositionsVersion.Version
      Name: Live

  STMMergeDailyGTFSVechiclePositionsTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: "Calls STMMergeDailyGTFSVechiclePositions every day at 5:05 AM (UTC)"
      ScheduleExpression: cron(5 5 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt STMMergeDailyGTFSVechiclePositions.Arn
          Id: "TargetMergeVehiclePositions"
          Input: >-
            {
              "input_bucket": "monitoring-mtl-stm-gtfs-vehicle-positions",
              "output_bucket": "monitoring-mtl-stm-gtfs-vehicle-positions-daily-merge",
              "timezone": "America/Montreal",
              "workers": 10
            }
          
  STMMergeDailyGTFSVechiclePositionsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt STMMergeDailyGTFSVechiclePositions.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt STMMergeDailyGTFSVechiclePositionsTrigger.Arn

Outputs:
  BIXIFetchGBFSStationStatusUpdateStatus:
    Description: "Has BIXIFetchGBFSStationStatus been updated?"
    Value: !If [SetBIXIFetchGBFSStationStatus, !Join [" ", ["Yes. It is now version:",!GetAtt BIXIFetchGBFSStationStatusVersion.Version]], "No"]

  BixiHistoricDataCheckerLambda:
    Description: "Lambda function to check for new data."
    Value: !GetAtt BixiHistoricDataCheckerLambda.Arn

  BixiHistoricDataProcessorLambda:
    Description: "Lambda function to process and load new data."
    Value: !GetAtt BixiHistoricDataProcessorLambda.Arn

  STMAnalyzeDailyStopsDataUpdateStatus:
    Description: "Has STMAnalyzeDailyStopsData been updated?"
    Value: !If [SetSTMAnalyzeDailyStopsData, !Join [" ", ["Yes. It is now version:",!GetAtt STMAnalyzeDailyStopsDataVersion.Version]], "No"]

  STMCreateDailyStopsInfoUpdateStatus:
    Description: "Has STMCreateDailyStopsInfo been updated?"
    Value: !If [SetSTMCreateDailyStopsInfo, !Join [" ", ["Yes. It is now version:",!GetAtt STMCreateDailyStopsInfoVersion.Version]], "No"]

  STMFetchGTFSTripUpdatesUpdateStatus:
    Description: "Has STMFetchGTFSTripUpdates been updated?"
    Value: !If [SetSTMFetchGTFSTripUpdates, !Join [" ", ["Yes. It is now version:",!GetAtt STMFetchGTFSTripUpdatesVersion.Version]], "No"]
  
  STMFetchGTFSVehiclePositionsUpdateStatus:
    Description: "Has STMFetchGTFSVehiclePositions been updated?"
    Value: "Broken function working on older version until fixed"
    #Value: !If [SetSTMFetchGTFSVehiclePositions, !Join [" ", ["Yes. It is now version:",!GetAtt STMFetchGTFSVehiclePositionsVersion.Version]], "No"]]

  STMFetchUpdateGTFSStaticfilesUpdateStatus:
    Description: "Has STMFetchUpdateGTFSStaticfiles been updated?"
    Value: !If [SetSTMFetchUpdateGTFSStaticfiles, !Join [" ", ["Yes. It is now version:",!GetAtt STMFetchUpdateGTFSStaticfilesVersion.Version]], "No"]

  STMFilterDailyGTFStaticfilesStatus:
    Description: "Has STMFilterDailyGTFStaticfiles been updated?"
    Value: !If [SetSTMFilterDailyGTFStaticfiles, !Join [" ", ["Yes. It is now version:",!GetAtt STMFilterDailyGTFStaticfilesVersion.Version]], "No"]

  STMMergeDailyGTFSVechiclePositionsUpdateStatus:
    Description: "Has STMMergeDailyGTFSVechiclePositions been updated?"
    Value: !If [SetSTMMergeDailyGTFSVechiclePositions, !Join [" ", ["Yes. It is now version:",!GetAtt STMMergeDailyGTFSVechiclePositionsVersion.Version]], "No"]
